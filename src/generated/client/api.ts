// WARNING: This file was auto-generated by codegen

import { type Options, ClientAPIBase } from '../../client-base.js';

/**
 * The adoption request's status.
 */
export enum AdoptionRequestStatus {
  Approved = 'Approved',
  Pending = 'Pending',
  Denied = 'Denied',
}

/**
 * The pet's adoption status.
 */
export enum AdoptionStatus {
  Adopted = 'Adopted',
  Available = 'Available',
  Pending = 'Pending',
}

/**
 * The pet's animal kind.
 */
export enum AnimalKind {
  Cat = 'Cat',
  Dog = 'Dog',
  Parrot = 'Parrot',
}

/**
 * Stringified UUIDv4.
 * See [RFC 4112](https://tools.ietf.org/html/rfc4122).
 * @pattern [0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}
 * @format uuid
 * @example "7312cc99-f99f-445e-a939-eb66c0c6724c"
 */
export type UUID = string;

/**
 * Pet characteristics.
 */
export interface Pet {
  /**
   * The pet's identifier.
   * @example "90dbbed9-bd3d-40ae-ad1c-86602844d4c1"
   */
  id: UUID;

  /**
   * The name of the pet.
   * @example "Max"
   */
  name: string;

  /**
   * The kind of breed the pet is.
   * @example "European Domestic Cat"
   */
  breed: string;

  /**
   * Free form text associated with the pet.
   * @example "Likes to scratch a lot."
   */
  notes: string;

  /**
   * What kind of pet it is.
   * @example "Cat"
   */
  kind: AnimalKind;

  /**
   * The age of the pet.
   * @format int32
   * @example 2
   */
  age: number;

  /**
   * Whether or not the pet has any health problems.
   * @example false
   */
  healthProblems: boolean;

  /**
   * When the pet was added to the system.
   * @format date
   * @example "2024-09-07T21:00:00.000Z"
   */
  addedDate: Date;

  /**
   * Pet's adoption status in the store.
   * @example "Pending"
   */
  status: AdoptionStatus;

  /**
   * The pet's tags.
   * @example [
   *   "cat",
   *   "orange"
   * ]
   */
  tags: string[];
}

/**
 * Inventory of adoption status to array of AdoptionRequests.
 */
export interface Inventory {
  /**
   * All pets that were adopted.
   * @example [
   *   {
   *     "id": "90dbbed9-bd3d-40ae-ad1c-86602844d4c1",
   *     "name": "Kozunak",
   *     "breed": "Orange Tabby",
   *     "notes": "Likes to bite a lot.",
   *     "kind": "Cat",
   *     "age": 4,
   *     "healthProblems": false,
   *     "addedDate": "2020-08-21T00:00:00.000Z",
   *     "status": "Adopted",
   *     "tags": [
   *       "cat",
   *       "orange"
   *     ]
   *   },
   *   {
   *     "id": "d4c8d1c2-3928-468f-8e34-b3166a56f9ce",
   *     "name": "Happy",
   *     "breed": "European Domestic Cat",
   *     "notes": "Very annoying.",
   *     "kind": "Cat",
   *     "age": 1,
   *     "healthProblems": false,
   *     "addedDate": "2023-08-08T00:00:00.000Z",
   *     "status": "Adopted",
   *     "tags": [
   *       "cat",
   *       "annoying",
   *       "white"
   *     ]
   *   }
   * ]
   */
  Adopted: Pet[];

  /**
   * All pets that are available for adoption.
   * @example [
   *   {
   *     "id": "fe6d2beb-acc3-4d8b-bf05-c8e863462238",
   *     "name": "Beji",
   *     "breed": "Cream Tabby",
   *     "notes": "Likes to fight.",
   *     "kind": "Cat",
   *     "age": 2,
   *     "healthProblems": true,
   *     "addedDate": "2022-03-01T00:00:00.000Z",
   *     "status": "Available",
   *     "tags": [
   *       "cat",
   *       "beige",
   *       "cream"
   *     ]
   *   }
   * ]
   */
  Available: Pet[];

  /**
   * All pets that have a pending adoption status.
   * @example [
   *   {
   *     "id": "39ccecc8-9344-49ac-b953-b1b271c089fc",
   *     "name": "Sr. Shnitz",
   *     "breed": "Cockatiel",
   *     "notes": "Likes biscuits!",
   *     "kind": "Parrot",
   *     "age": 10,
   *     "healthProblems": false,
   *     "addedDate": "2024-08-20T00:00:00.000Z",
   *     "status": "Pending",
   *     "tags": [
   *       "parrot",
   *       "squeak",
   *       "mixed colors"
   *     ]
   *   }
   * ]
   */
  Pending: Pet[];
}

/**
 * Adoption request information.
 */
export interface AdoptionRequest {
  /**
   * The adoption's ID.
   * @example "67120cf3-1434-44be-b660-b02df64db677"
   */
  id: UUID;

  /**
   * The adoptee's ID.
   * @example "90dbbed9-bd3d-40ae-ad1c-86602844d4c1"
   */
  petId: UUID;

  /**
   * The date of submission of the adoption request.
   * @format date-time
   * @example "2024-08-25T00:00:00.000Z"
   */
  dateOfSubmission: Date;

  /**
   * The adoption request status.
   * @example "Pending"
   */
  status: AdoptionRequestStatus;
}

export interface ProblemDetails {
  type?: string;

  title?: string;

  /**
   * @format int32
   */
  status?: number;

  detail?: string;

  instance?: string;
}

export class ClientAPI {
  pet: PetClientAPI;
  store: StoreClientAPI;

  constructor(...options: unknown[]) {
    this.pet = new PetClientAPI(...options);
    this.store = new StoreClientAPI(...options);
  }
}

/**
 * Everything about your Pets
 */
export class PetClientAPI extends ClientAPIBase {
  /**
   * Add a new pet to the store.
   * @param pet Create a new pet in the store.
   * @summary Add a new pet to the store.
   */
  createPet(pet: Pet, options?: Options): Promise<Pet> {
    return this.fetch<Pet>(`/pet`, {
      method: 'POST',
      body: JSON.stringify(pet),
      headers: {
        'Content-Type': 'application/json',
      },
      ...options,
    });
  }

  /**
   * Update an existing pet by ID.
   * @param pet The pet's information that should be used in the update.
   * @summary Update an existing pet.
   */
  updatePet(pet: Pet, options?: Options): Promise<Pet> {
    return this.fetch<Pet>(`/pet`, {
      method: 'PUT',
      body: JSON.stringify(pet),
      headers: {
        'Content-Type': 'application/json',
      },
      ...options,
    });
  }

  /**
   * Returns all pets with limit and offset functionality.
   * @param offset Offset to discard elements.
   * @param limit How many records to return.
   * @summary Returns all pets.
   */
  getAllPets(
    offset?: number,
    limit?: number,
    options?: Options
  ): Promise<Pet[]> {
    this.validateParam(offset, {
      name: 'offset',
      required: false,
      paramType: 'query',
      type: 'number',
      numberFormat: 'integer',
    });

    this.validateParam(limit, {
      name: 'limit',
      required: false,
      paramType: 'query',
      type: 'number',
      numberFormat: 'integer',
    });

    const urlParams = new URLSearchParams();

    this.appendUrlParam(urlParams, offset, {
      name: 'offset',
      type: 'number',
    });

    this.appendUrlParam(urlParams, limit, {
      name: 'limit',
      type: 'number',
    });

    const urlParamsString = urlParams.toString();

    const queryString = urlParamsString.length > 0 ? `?${urlParamsString}` : '';

    return this.fetch<Pet[]>(`/pet/all${queryString}`, options);
  }

  /**
   * Returns pets that have the selected adoption status.
   * @param status The adoption status.
   * @summary Finds Pets by status.
   */
  getPetsByStatus(status: AdoptionStatus, options?: Options): Promise<Pet[]> {
    this.validateParam(status, {
      name: 'status',
      required: true,
      paramType: 'query',
      type: 'string',
      enumValues: ['Adopted', 'Available', 'Pending'],
    });

    const urlParams = new URLSearchParams();

    this.appendUrlParam(urlParams, status, {
      name: 'status',
      type: 'string',
    });

    const urlParamsString = urlParams.toString();

    const queryString = urlParamsString.length > 0 ? `?${urlParamsString}` : '';

    return this.fetch<Pet[]>(`/pet/findByStatus${queryString}`, options);
  }

  /**
   * Returns pets that are of a specific set of kinds.
   * @param kinds The set of kinds of pet.
   * @summary Finds Pets by set of kinds.
   */
  getPetsByKind(kinds: AnimalKind[], options?: Options): Promise<Pet[]> {
    this.validateParamArray(kinds, {
      name: 'kinds',
      required: true,
      paramType: 'query',
      type: 'string',
      enumValues: ['Cat', 'Dog', 'Parrot'],
    });

    const urlParams = new URLSearchParams();

    this.appendUrlParamArray(urlParams, kinds, {
      name: 'kinds',
      type: 'string',
    });

    const urlParamsString = urlParams.toString();

    const queryString = urlParamsString.length > 0 ? `?${urlParamsString}` : '';

    return this.fetch<Pet[]>(`/pet/findByKinds${queryString}`, options);
  }

  /**
   * Returns pets that include the filter tags.
   * @param tags The tags to filter by.
   * @summary Finds Pets by tags.
   */
  getPetsByTags(tags: string[], options?: Options): Promise<Pet[]> {
    this.validateParamArray(tags, {
      name: 'tags',
      required: true,
      paramType: 'query',
      type: 'string',
    });

    const urlParams = new URLSearchParams();

    this.appendUrlParamArray(urlParams, tags, {
      name: 'tags',
      type: 'string',
    });

    const urlParamsString = urlParams.toString();

    const queryString = urlParamsString.length > 0 ? `?${urlParamsString}` : '';

    return this.fetch<Pet[]>(`/pet/findByTags${queryString}`, options);
  }

  /**
   * Returns pets that were added after the given date.
   * @param afterDate The date to filter by.
   * @summary Finds Pets by added date.
   */
  getPetsByDate(afterDate: Date, options?: Options): Promise<Pet[]> {
    this.validateParam(afterDate, {
      name: 'afterDate',
      required: true,
      paramType: 'query',
      type: 'Date',
    });

    const urlParams = new URLSearchParams();

    this.appendUrlParam(urlParams, afterDate, {
      name: 'afterDate',
      type: 'Date',
    });

    const urlParamsString = urlParams.toString();

    const queryString = urlParamsString.length > 0 ? `?${urlParamsString}` : '';

    return this.fetch<Pet[]>(`/pet/findByDate${queryString}`, options);
  }

  /**
   * Returns a single pet.
   * @param petId The pet's id.
   * @summary Find pet by ID.
   */
  getPet(petId: UUID, options?: Options): Promise<Pet> {
    this.validateParam(petId, {
      name: 'petId',
      required: true,
      paramType: 'path',
      type: 'string',
      pattern:
        '[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}',
    });

    return this.fetch<Pet>(`/pet/${encodeURIComponent(petId)}`, options);
  }

  /**
   * Deletes a pet by ID.
   * @param petId Pet ID to delete.
   * @summary Deletes a pet.
   */
  deletePet(petId: UUID, options?: Options): Promise<void> {
    this.validateParam(petId, {
      name: 'petId',
      required: true,
      paramType: 'path',
      type: 'string',
      pattern:
        '[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}',
    });

    return this.fetch(`/pet/${encodeURIComponent(petId)}`, {
      method: 'DELETE',
      ...options,
    });
  }
}

/**
 * Access to Petstore orders
 */
export class StoreClientAPI extends ClientAPIBase {
  /**
   * Returns a map of adoption status to array of pets.
   * @summary Returns pet inventories by adoption status.
   */
  getInventory(options?: Options): Promise<Inventory> {
    return this.fetch<Inventory>(`/store/inventory`, options);
  }

  /**
   * Place an adoption request for a pet.
   * @param adoptionRequest The adoption request.
   * @summary Request an adoption of a pet.
   */
  adoptPet(
    adoptionRequest: AdoptionRequest,
    options?: Options
  ): Promise<AdoptionRequest> {
    return this.fetch<AdoptionRequest>(`/store/adopt`, {
      method: 'POST',
      body: JSON.stringify(adoptionRequest),
      headers: {
        'Content-Type': 'application/json',
      },
      ...options,
    });
  }

  /**
   * Find adoption request by ID.
   * @param requestId The adoption request's ID.
   * @summary Find adoption request by ID.
   */
  getAdoptRequestById(
    requestId: UUID,
    options?: Options
  ): Promise<AdoptionRequest> {
    this.validateParam(requestId, {
      name: 'requestId',
      required: true,
      paramType: 'path',
      type: 'string',
      pattern:
        '[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}',
    });

    return this.fetch<AdoptionRequest>(
      `/store/adopt/${encodeURIComponent(requestId)}`,
      options
    );
  }

  /**
   * Delete adoption request by ID.
   * @param requestId The adoption request's ID.
   * @summary Delete adoption request by ID.
   */
  deleteAdoptRequestById(requestId: UUID, options?: Options): Promise<void> {
    this.validateParam(requestId, {
      name: 'requestId',
      required: true,
      paramType: 'path',
      type: 'string',
      pattern:
        '[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}',
    });

    return this.fetch(`/store/adopt/${encodeURIComponent(requestId)}`, {
      method: 'DELETE',
      ...options,
    });
  }
}
