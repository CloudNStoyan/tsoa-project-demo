openapi: 3.0.0
components:
  examples: {}
  headers: {}
  parameters: {}
  requestBodies: {}
  responses: {}
  schemas:
    ApiError:
      properties:
        status:
          type: number
          format: double
        message:
          type: string
      required:
        - status
        - message
      type: object
      additionalProperties: false
    UUID:
      type: string
      example: 66ef17a1-af37-4f7b-8e82-b341e0241a30
      format: uuid
      description: |-
        Stringified UUIDv4.
        See [RFC 4112](https://tools.ietf.org/html/rfc4122).
      pattern:
        "[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-\
        [0-9A-Fa-f]{12}"
    MySpecialNumber:
      type: integer
      format: int32
      description: My Special Number description.
    HappinessStatus:
      description: Happiness Status Enum that is very important.
      enum:
        - Happy
        - Sad
      type: string
    UserFromGroup:
      description: |-
        User objects allow you to associate actions performed
        in the system with the user that performed them.
        The User object contains common information across
        every user in the system regardless of status and role.
      properties:
        id:
          description: The user's identifier.
          allOf:
            - $ref: '#/components/schemas/UUID'
        email:
          type: string
          description: The email the user used to register his account.
          example: jane@doe.com
        name:
          type: string
          description: The name the user used to register his account.
          example: Jane Doe The First
        isCat:
          type: boolean
          description: Is the user a cat.
          example: false
        mySpecialCat:
          description: My Special Special Cat.
          allOf:
            - $ref: '#/components/schemas/MySpecialNumber'
        status:
          description: The happiness status of the user.
          allOf:
            - $ref: '#/components/schemas/HappinessStatus'
        manyStatuses:
          items:
            $ref: '#/components/schemas/HappinessStatus'
          type: array
          description: An array of happiness statuses of the user.
        catLevel:
          type: string
          enum:
            - Ultra Cat
            - Mega Cat
          description: The cat level of the user.
          example: Ultra Cat
        catIndex:
          items:
            anyOf:
              - type: string
              - type: number
                format: double
              - $ref: '#/components/schemas/HappinessStatus'
              - anyOf:
                  - type: string
                  - anyOf:
                      - type: string
                      - $ref: '#/components/schemas/HappinessStatus'
          type: array
          description: The cat index of the user.
        phoneNumbers:
          items:
            type: string
          type: array
          description: The phone numbers associated with the user.
        groupId:
          type: integer
          format: int32
          example: 113
      required:
        - id
        - email
        - name
        - isCat
        - mySpecialCat
        - phoneNumbers
        - groupId
      type: object
      additionalProperties: false
    User:
      description: User description written by yours truly Stoyan.
      properties:
        id:
          description: The user's identifier.
          allOf:
            - $ref: '#/components/schemas/UUID'
        email:
          type: string
          description: The email the user used to register his account.
          example: jane@doe.com
        name:
          type: string
          description: The name the user used to register his account.
          example: Jane Doe The First
        isCat:
          type: boolean
          description: Is the user a cat.
          example: false
        mySpecialCat:
          description: My Special Special Cat.
          allOf:
            - $ref: '#/components/schemas/MySpecialNumber'
        status:
          description: The happiness status of the user.
          allOf:
            - $ref: '#/components/schemas/HappinessStatus'
        manyStatuses:
          items:
            $ref: '#/components/schemas/HappinessStatus'
          type: array
          description: An array of happiness statuses of the user.
        catLevel:
          type: string
          enum:
            - Ultra Cat
            - Mega Cat
          description: The cat level of the user.
          example: Ultra Cat
        catIndex:
          items:
            anyOf:
              - type: string
              - type: number
                format: double
              - $ref: '#/components/schemas/HappinessStatus'
              - anyOf:
                  - type: string
                  - anyOf:
                      - type: string
                      - $ref: '#/components/schemas/HappinessStatus'
          type: array
          description: The cat index of the user.
        phoneNumbers:
          items:
            type: string
          type: array
          description: The phone numbers associated with the user.
      required:
        - id
        - email
        - name
        - isCat
        - mySpecialCat
        - phoneNumbers
      type: object
      additionalProperties: false
    AuthUser:
      description: An authenticated user.
      properties:
        id:
          type: integer
          format: int32
          description: The authenticated user's identifier.
          example: 1
        name:
          type: string
          description: The authenticated user's name.
          example: Joe Done
      required:
        - id
        - name
      type: object
      additionalProperties: false
  securitySchemes:
    api_key:
      type: apiKey
      name: access_token
      in: query
info:
  title: tsoa-project-demo
  version: 1.0.0
  contact: {}
paths:
  /users/{groupId}/all:
    get:
      operationId: GetUsers
      responses:
        '200':
          description: An array with User Objects.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserFromGroup'
                type: array
              examples:
                An example of Users:
                  value:
                    - id: 66ef17a1-af37-4f7b-8e82-b341e0241a30
                      email: jane@doe.com
                      name: Jane Doe
                      status: Happy
                      phoneNumbers: []
                      groupId: 1
                      isCat: false
                      mySpecialCat: 44
                    - id: c421afa9-08c7-491a-90a1-575bb656cffd
                      email: john@doe.com
                      name: John Doe
                      status: Sad
                      phoneNumbers: []
                      groupId: 1
                      isCat: false
                      mySpecialCat: 44
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              examples:
                Example 1:
                  value:
                    status: 401
                    message: Access denied!
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              examples:
                Example 1:
                  value:
                    status: 404
                    message: Users with this groupId have not be found!
      description: >-
        Retrieves the details of users.

        Supply the unique group ID from either and receive corresponding user
        details.
      summary: Retrieve details of users.
      tags:
        - User
      security: []
      parameters:
        - description: The group's identifier.
          in: path
          name: groupId
          required: true
          schema:
            format: double
            type: number
        - description: Provide a limit to the result.
          in: query
          name: limit
          required: false
          schema:
            default: 5
            format: double
            type: number
        - description: The =required cat level of users.
          in: query
          name: catLevel
          required: false
          schema:
            type: string
  /users/{userId}:
    get:
      operationId: GetUser
      responses:
        '200':
          description: details of the user in the form of an User Object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFromGroup'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              examples:
                Example 1:
                  value:
                    status: 401
                    message: Access denied!
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              examples:
                Example 1:
                  value:
                    status: 404
                    message: User not found!
      description: >-
        Retrieves the details of a user.

        Supply the unique user ID from either and receive corresponding user
        details.
      summary: Retrieve details of a user.
      tags:
        - User
      security: []
      parameters:
        - description: The user's identifier.
          in: path
          name: userId
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
    put:
      operationId: UpdateUser
      responses:
        '200':
          description: the updated details of the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              examples:
                Example 1:
                  value:
                    status: 401
                    message: Access denied!
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              examples:
                Example 1:
                  value:
                    status: 404
                    message: User not found!
      description: >-
        Update the details of a user.

        Supply the unique user ID from either and receive corresponding user
        details.
      summary: Update details of a user.
      tags:
        - User
      security: []
      parameters:
        - description: The user's identifier.
          in: path
          name: userId
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        description: The user's data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
              description: The user's data.
    delete:
      operationId: DeleteUser
      responses:
        '200':
          description: Nothing is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '204':
          description: No Content
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              examples:
                Example 1:
                  value:
                    status: 401
                    message: Access denied!
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
              examples:
                Example 1:
                  value:
                    status: 404
                    message: User not found!
      description: Permanently delete an user.
      summary: Delete an user.
      tags:
        - User
      security: []
      parameters:
        - description: The user's identifier.
          in: path
          name: userId
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
  /secure:
    get:
      operationId: GetTreasure
      responses:
        '200':
          description: An AuthUser.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthUser'
      description: Get the biggest treasure.
      summary: Retrieve treasure.
      tags:
        - Secure
      security:
        - api_key:
            - cat
            - dog
      parameters: []
  /cats/add:
    post:
      operationId: PostCat
      responses:
        '200':
          description: '"add :)".'
          content:
            application/json:
              schema:
                type: string
      description: Demonstrative cat endpoint that returns static data.
      summary: Retrieve "add :)" from the server.
      tags:
        - Cat
      security: []
      parameters: []
  /cats/{catId}:
    post:
      operationId: PostCatId
      responses:
        '200':
          description: The given catId.
          content:
            application/json:
              schema:
                type: string
      description: Demonstrative cat endpoint that returns dynamic data.
      summary: Retrieve catId from the server.
      tags:
        - Cat
      security: []
      parameters:
        - description: The identification of a cat.
          in: path
          name: catId
          required: true
          schema:
            type: string
servers: []
tags:
  - name: User
    description: Operations about users
    externalDocs:
      description: Find out more about users
      url: http://swagger.io
