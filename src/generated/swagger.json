{
  "openapi": "3.0.0",
  "components": {
    "examples": {},
    "headers": {},
    "parameters": {},
    "requestBodies": {},
    "responses": {},
    "schemas": {
      "ApiError": {
        "properties": {
          "status": {
            "type": "number",
            "format": "double"
          },
          "message": {
            "type": "string"
          }
        },
        "required": ["status", "message"],
        "type": "object",
        "additionalProperties": false
      },
      "UUID": {
        "type": "string",
        "example": "66ef17a1-af37-4f7b-8e82-b341e0241a30",
        "format": "uuid",
        "description": "Stringified UUIDv4.\nSee [RFC 4112](https://tools.ietf.org/html/rfc4122).",
        "pattern": "[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}"
      },
      "UserFromGroup": {
        "description": "User objects allow you to associate actions performed\nin the system with the user that performed them.\nThe User object contains common information across\nevery user in the system regardless of status and role.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID",
            "description": "The user's identifier.",
            "example": "66ef17a1-af37-4f7b-8e82-b341e0241a30"
          },
          "email": {
            "type": "string",
            "description": "The email the user used to register his account.",
            "example": "jane@doe.com"
          },
          "name": {
            "type": "string",
            "description": "The name the user used to register his account.",
            "example": "Jane Doe The First"
          },
          "isCat": {
            "type": "boolean",
            "description": "Is the user a cat.",
            "example": false
          },
          "status": {
            "type": "string",
            "enum": ["Happy", "Sad"],
            "description": "The happiness status of the user.",
            "example": "Sad"
          },
          "phoneNumbers": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "The phone numbers associated with the user.",
            "example": []
          },
          "groupId": {
            "type": "integer",
            "format": "int32",
            "example": 113
          }
        },
        "required": ["id", "email", "name", "isCat", "phoneNumbers", "groupId"],
        "type": "object",
        "additionalProperties": false
      },
      "User": {
        "description": "User description written by yours truly Stoyan.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/UUID",
            "description": "The user's identifier.",
            "example": "66ef17a1-af37-4f7b-8e82-b341e0241a30"
          },
          "email": {
            "type": "string",
            "description": "The email the user used to register his account.",
            "example": "jane@doe.com"
          },
          "name": {
            "type": "string",
            "description": "The name the user used to register his account.",
            "example": "Jane Doe The First"
          },
          "isCat": {
            "type": "boolean",
            "description": "Is the user a cat.",
            "example": false
          },
          "status": {
            "type": "string",
            "enum": ["Happy", "Sad"],
            "description": "The happiness status of the user.",
            "example": "Sad"
          },
          "phoneNumbers": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "The phone numbers associated with the user.",
            "example": []
          }
        },
        "required": ["id", "email", "name", "isCat", "phoneNumbers"],
        "type": "object",
        "additionalProperties": false
      },
      "AuthUser": {
        "description": "An authenticated user.",
        "properties": {
          "id": {
            "type": "number",
            "format": "double",
            "description": "The authenticated user's identifier.",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The authenticated user's name.",
            "example": "Joe Done"
          }
        },
        "required": ["id", "name"],
        "type": "object",
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "name": "access_token",
        "in": "query"
      }
    }
  },
  "info": {
    "title": "tsoa-project-demo",
    "version": "1.0.0",
    "contact": {}
  },
  "paths": {
    "/users/{groupId}/all": {
      "get": {
        "operationId": "GetUsers",
        "responses": {
          "200": {
            "description": "An array with User Objects.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/UserFromGroup"
                  },
                  "type": "array"
                },
                "examples": {
                  "An example of Users": {
                    "value": [
                      {
                        "id": "66ef17a1-af37-4f7b-8e82-b341e0241a30",
                        "email": "jane@doe.com",
                        "name": "Jane Doe",
                        "status": "Happy",
                        "phoneNumbers": [],
                        "groupId": 1,
                        "isCat": false
                      },
                      {
                        "id": "c421afa9-08c7-491a-90a1-575bb656cffd",
                        "email": "john@doe.com",
                        "name": "John Doe",
                        "status": "Sad",
                        "phoneNumbers": [],
                        "groupId": 1,
                        "isCat": false
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": 401,
                      "message": "Access denied!"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": 404,
                      "message": "Users with this groupId have not be found!"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves the details of users.\nSupply the unique group ID from either and receive corresponding user details.",
        "summary": "Retrieve details of users.",
        "tags": ["User"],
        "security": [],
        "parameters": [
          {
            "description": "The group's identifier.",
            "in": "path",
            "name": "groupId",
            "required": true,
            "schema": {
              "format": "double",
              "type": "number"
            }
          },
          {
            "description": "Provide a limit to the result.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "double",
              "type": "number"
            }
          }
        ]
      }
    },
    "/users/{userId}": {
      "get": {
        "operationId": "GetUser",
        "responses": {
          "200": {
            "description": "details of the user in the form of an User Object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserFromGroup"
                },
                "examples": {
                  "An example of a user.": {
                    "value": {
                      "id": "66ef17a1-af37-4f7b-8e82-b341e0241a30",
                      "email": "Example@doe.com",
                      "name": "Example Doe",
                      "status": "Sad",
                      "phoneNumbers": []
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": 401,
                      "message": "Access denied!"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": 404,
                      "message": "User not found!"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves the details of a user.\nSupply the unique user ID from either and receive corresponding user details.",
        "summary": "Retrieve details of a user.",
        "tags": ["User"],
        "security": [],
        "parameters": [
          {
            "description": "The user's identifier.",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ]
      },
      "put": {
        "operationId": "UpdateUser",
        "responses": {
          "200": {
            "description": "the updated details of the user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "examples": {
                  "An example of updated user.": {
                    "value": {
                      "id": "66ef17a1-af37-4f7b-8e82-b341e0241a30",
                      "email": "Updated@doe.com",
                      "name": "Updated Doe",
                      "status": "Sad",
                      "phoneNumbers": []
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": 401,
                      "message": "Access denied!"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": 404,
                      "message": "User not found!"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Update the details of a user.\nSupply the unique user ID from either and receive corresponding user details.",
        "summary": "Update details of a user.",
        "tags": ["User"],
        "security": [],
        "parameters": [
          {
            "description": "The user's identifier.",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "requestBody": {
          "description": "The user's data.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User",
                "description": "The user's data."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "DeleteUser",
        "responses": {
          "200": {
            "description": "Nothing is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": 401,
                      "message": "Access denied!"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": 404,
                      "message": "User not found!"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Permanently delete an user.",
        "summary": "Delete an user.",
        "tags": ["User"],
        "security": [],
        "parameters": [
          {
            "description": "The user's identifier.",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ]
      }
    },
    "/secure": {
      "get": {
        "operationId": "GetTreasure",
        "responses": {
          "200": {
            "description": "An AuthUser.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthUser"
                },
                "examples": {
                  "An example of AuthUser.": {
                    "value": {
                      "id": 1,
                      "name": "AuthenticatedUser"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Get the biggest treasure.",
        "summary": "Retrieve treasure.",
        "tags": ["Secure"],
        "security": [
          {
            "api_key": ["cat", "dog"]
          }
        ],
        "parameters": []
      }
    },
    "/cats/add": {
      "post": {
        "operationId": "PostCat",
        "responses": {
          "200": {
            "description": "\"add :)\".",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "An example of the add endpoint.": {
                    "value": "add :)"
                  }
                }
              }
            }
          }
        },
        "description": "Demonstrative cat endpoint that returns static data.",
        "summary": "Retrieve \"add :)\" from the server.",
        "tags": ["Cat"],
        "security": [],
        "parameters": []
      }
    },
    "/cats/{catId}": {
      "post": {
        "operationId": "PostCatId",
        "responses": {
          "200": {
            "description": "The given catId.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "An example of an catId.": {
                    "value": "cat-4"
                  }
                }
              }
            }
          }
        },
        "description": "Demonstrative cat endpoint that returns dynamic data.",
        "summary": "Retrieve catId from the server.",
        "tags": ["Cat"],
        "security": [],
        "parameters": [
          {
            "description": "The identification of a cat.",
            "in": "path",
            "name": "catId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000/"
    }
  ],
  "tags": [
    {
      "name": "User",
      "description": "Operations about users",
      "externalDocs": {
        "description": "Find out more about users",
        "url": "http://swagger.io"
      }
    }
  ]
}
